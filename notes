notes


1. Write a Python program to convert JSON data to Python object. 


import json
python_dict =  {"name": "David", "age": 6, "class":"I"}
python_list =  ["Red", "Green", "Black"]
python_str =  "Python Json"
python_int =  (1234)
python_float =  (21.34)
python_T =  (True)
python_F =  (False)
python_N =  (None)


Given is following class:
class DownSizeMutable:
    def __init__(self, start, downsize = 1):
        self.current = start
        self.downsize = downsize

    def __iter__(self):
        return self

    def __next__(self):
        if self.current <= 0:
            raise StopIteration
        else:
            self.current -= self.downsize
            return self.current + self.downsize
Tasks A:
Think about: Are objects of the class DownSizeMutable 'iterable'? Answer: YES!!!
Program a function isIterable(object)-> bool that proves if the passed object is iterable.
Call the function isIterable(...) with the following short python script:
dsm = DownSizeMutable(70, 7)
print(isIterable(dsm))

def isIterable(obj) -> bool:
    try:
        iter(obj)
        return True
    except TypeError:
        return False

class DownSizeMutable:
    def __init__(self, start, downsize=1):
        self.current = start
        self.downsize = downsize

    def __iter__(self):
        return self

    def __next__(self):
        if self.current <= 0:
            raise StopIteration
        else:
            self.current -= self.downsize
            return self.current + self.downsize

# Test the function with an instance of DownSizeMutable
dsm = DownSizeMutable(70, 7)
print(isIterable(dsm))

Task B:
Demonstrate with a for-loop that the object dsm  is iterable. Save the values
of DownSizeMutable(70, 7) in a list with the name myList.
Print out the content of myList.
The printed result will be:  [70, 63, 56, 49, 42, 35, 28, 21, 14, 7]

class DownSizeMutable:
    def __init__(self, start, downsize=1):
        self.current = start
        self.downsize = downsize

    def __iter__(self):
        return self

    def __next__(self):
        if self.current <= 0:
            raise StopIteration
        else:
            self.current -= self.downsize
            return self.current + self.downsize

# Function to check if an object is iterable
def isIterable(obj) -> bool:
    try:
        iter(obj)
        return True
    except TypeError:
        return False

# Create an instance of DownSizeMutable
dsm = DownSizeMutable(70, 7)

# Check if the object is iterable
if isIterable(dsm):
    # Use a for-loop to iterate over the object and save values in myList
    myList = [value for value in dsm]

    # Print the content of myList
    print(myList)
else:
    print("Object is not iterable.")


    Task C:
The result of the task C is the same as in TaskB.
BUT: Solve the same task with a while-loop.

Important:
Copy your solution for Task A, B and C into the text box below.
The different parts of these 3 tasks (Task A, Task B and Task C) must be clearly labeled in the text box below.
-> In short: It must be very clear, which code belongs to which task (use comments, titles, lables, etc.)